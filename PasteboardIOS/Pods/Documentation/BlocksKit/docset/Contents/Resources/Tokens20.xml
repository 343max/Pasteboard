<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/NSOrderedSet+BlocksKit.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/NSOrderedSet(BlocksKit)</TokenIdentifier>
			<Abstract>Block extensions for NSOrderedSet.</Abstract>
			<DeclaredIn>NSOrderedSet+BlocksKit.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cat/NSArray(BlocksKit)</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/cat/NSSet(BlocksKit)</TokenIdentifier>
		
	</RelatedTokens>
	
			<NodeRef refid="20"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSOrderedSet(BlocksKit)/each:</TokenIdentifier>
			<Abstract>Loops through an ordered set and executes the given block with each object.</Abstract>
			<DeclaredIn>NSOrderedSet+BlocksKit.h</DeclaredIn>			
			
			<Declaration>- (void)each:(BKSenderBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract>A single-argument, void-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/each:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSOrderedSet(BlocksKit)/apply:</TokenIdentifier>
			<Abstract>Enumerates through an ordered set concurrently and executes the given block
once for each object.</Abstract>
			<DeclaredIn>NSOrderedSet+BlocksKit.h</DeclaredIn>			
			
			<Declaration>- (void)apply:(BKSenderBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract>A single-argument, void-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/apply:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSOrderedSet(BlocksKit)/match:</TokenIdentifier>
			<Abstract>Loops through an ordered set to find the object matching the block.</Abstract>
			<DeclaredIn>NSOrderedSet+BlocksKit.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intfm/NSOrderedSet(BlocksKit)/select:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (id)match:(BKValidationBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract>A single-argument, BOOL-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Returns the object, if found, or nil.</Abstract></ReturnValue>
			<Anchor>//api/name/match:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSOrderedSet(BlocksKit)/select:</TokenIdentifier>
			<Abstract>Loops through an ordered set to find the objects matching the block.</Abstract>
			<DeclaredIn>NSOrderedSet+BlocksKit.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intfm/NSOrderedSet(BlocksKit)/match:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (NSOrderedSet *)select:(BKValidationBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract>A single-argument, BOOL-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Returns an ordered set of the objects found.</Abstract></ReturnValue>
			<Anchor>//api/name/select:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSOrderedSet(BlocksKit)/reject:</TokenIdentifier>
			<Abstract>Loops through an ordered set to to find the objects not matching the block.</Abstract>
			<DeclaredIn>NSOrderedSet+BlocksKit.h</DeclaredIn>			
			
			<Declaration>- (NSOrderedSet *)reject:(BKValidationBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract>A single-argument, BOOL-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Returns an ordered set of all objects not found.</Abstract></ReturnValue>
			<Anchor>//api/name/reject:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSOrderedSet(BlocksKit)/map:</TokenIdentifier>
			<Abstract>Call the block once for each object and create an ordered set of the return
values.</Abstract>
			<DeclaredIn>NSOrderedSet+BlocksKit.h</DeclaredIn>			
			
			<Declaration>- (NSOrderedSet *)map:(BKTransformBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract>A single-argument, object-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Returns an ordered set of the objects returned by the block.</Abstract></ReturnValue>
			<Anchor>//api/name/map:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSOrderedSet(BlocksKit)/reduce:withBlock:</TokenIdentifier>
			<Abstract>Arbitrarily accumulate objects using a block.</Abstract>
			<DeclaredIn>NSOrderedSet+BlocksKit.h</DeclaredIn>			
			
			<Declaration>- (id)reduce:(id)initial withBlock:(BKAccumulationBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>initial</Name>
					<Abstract>The value of the reduction at its start.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract>A block that takes the current sum and the next object to return the new sum.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>An accumulated value.</Abstract></ReturnValue>
			<Anchor>//api/name/reduce:withBlock:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSOrderedSet(BlocksKit)/any:</TokenIdentifier>
			<Abstract>Loops through an ordered set to find whether any object matches the block.</Abstract>
			<DeclaredIn>NSOrderedSet+BlocksKit.h</DeclaredIn>			
			
			<Declaration>- (BOOL)any:(BKValidationBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract>A single-argument, BOOL-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>YES for the first time the block returns YES for an object, NO otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/any:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSOrderedSet(BlocksKit)/none:</TokenIdentifier>
			<Abstract>Loops through an ordered set to find whether no objects match the block.</Abstract>
			<DeclaredIn>NSOrderedSet+BlocksKit.h</DeclaredIn>			
			
			<Declaration>- (BOOL)none:(BKValidationBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract>A single-argument, BOOL-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>YES if the block returns NO for all objects in the ordered set, NO
otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/none:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSOrderedSet(BlocksKit)/all:</TokenIdentifier>
			<Abstract>Loops through an ordered set to find whether all objects match the block.</Abstract>
			<DeclaredIn>NSOrderedSet+BlocksKit.h</DeclaredIn>			
			
			<Declaration>- (BOOL)all:(BKValidationBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>block</Name>
					<Abstract>A single-argument, BOOL-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>YES if the block returns YES for all objects in the ordered set, NO
otherwise.</Abstract></ReturnValue>
			<Anchor>//api/name/all:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/NSOrderedSet(BlocksKit)/corresponds:withBlock:</TokenIdentifier>
			<Abstract>Tests whether every element of this ordered set relates to the corresponding
element of another array according to match by block.</Abstract>
			<DeclaredIn>NSOrderedSet+BlocksKit.h</DeclaredIn>			
			
			<Declaration>- (BOOL)corresponds:(NSOrderedSet *)list withBlock:(BKKeyValueValidationBlock)block</Declaration>
			<Parameters>
				<Parameter>
					<Name>list</Name>
					<Abstract>An array of objects to compare with.</Abstract>
				</Parameter><Parameter>
					<Name>block</Name>
					<Abstract>A two-argument, BOOL-returning code block.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract>Returns a BOOL, true if every element of the ordered set relates to
corresponding element in another ordered set.</Abstract></ReturnValue>
			<Anchor>//api/name/corresponds:withBlock:</Anchor>
		</Token>
		
	</File>
</Tokens>